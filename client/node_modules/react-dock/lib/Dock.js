"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _autoprefix = _interopRequireDefault(require("./autoprefix"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function autoprefixes(styles) {
  return Object.keys(styles).reduce(function (obj, key) {
    return obj[key] = (0, _autoprefix["default"])(styles[key]), obj;
  }, {});
}

var styles = autoprefixes({
  wrapper: {
    position: 'fixed',
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  dim: {
    position: 'fixed',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    zIndex: 0,
    background: 'rgba(0, 0, 0, 0.2)',
    opacity: 1
  },
  dimAppear: {
    opacity: 0
  },
  dimTransparent: {
    pointerEvents: 'none'
  },
  dimHidden: {
    opacity: 0
  },
  dock: {
    position: 'fixed',
    zIndex: 1,
    boxShadow: '0 0 4px rgba(0, 0, 0, 0.3)',
    background: 'white',
    left: 0,
    top: 0,
    width: '100%',
    height: '100%'
  },
  dockHidden: {
    opacity: 0
  },
  dockResizing: {
    transition: 'none'
  },
  dockContent: {
    width: '100%',
    height: '100%',
    overflow: 'auto'
  },
  resizer: {
    position: 'absolute',
    zIndex: 2,
    opacity: 0
  }
});

function getTransitions(duration) {
  return ['left', 'top', 'width', 'height'].map(function (p) {
    return "".concat(p, " ").concat(duration / 1000, "s ease-out");
  });
}

function getDockStyles(_ref, _ref2) {
  var fluid = _ref.fluid,
      dockStyle = _ref.dockStyle,
      dockHiddenStyle = _ref.dockHiddenStyle,
      duration = _ref.duration,
      position = _ref.position,
      isVisible = _ref.isVisible;
  var size = _ref2.size,
      isResizing = _ref2.isResizing,
      fullWidth = _ref2.fullWidth,
      fullHeight = _ref2.fullHeight;
  var posStyle;
  var absSize = fluid ? "".concat(size * 100, "%") : "".concat(size, "px");

  function getRestSize(fullSize) {
    return fluid ? "".concat(100 - size * 100, "%") : "".concat(fullSize - size, "px");
  }

  switch (position) {
    case 'left':
      posStyle = {
        width: absSize,
        left: isVisible ? 0 : '-' + absSize
      };
      break;

    case 'right':
      posStyle = {
        left: isVisible ? getRestSize(fullWidth) : fullWidth,
        width: absSize
      };
      break;

    case 'top':
      posStyle = {
        top: isVisible ? 0 : '-' + absSize,
        height: absSize
      };
      break;

    case 'bottom':
      posStyle = {
        top: isVisible ? getRestSize(fullHeight) : fullHeight,
        height: absSize
      };
      break;
  }

  var transitions = getTransitions(duration);
  return [styles.dock, (0, _autoprefix["default"])({
    transition: [].concat(_toConsumableArray(transitions), [!isVisible && "opacity 0.01s linear ".concat(duration / 1000, "s")]).filter(function (t) {
      return t;
    }).join(',')
  }), dockStyle, (0, _autoprefix["default"])(posStyle), isResizing && styles.dockResizing, !isVisible && styles.dockHidden, !isVisible && dockHiddenStyle];
}

function getDimStyles(_ref3, _ref4) {
  var dimMode = _ref3.dimMode,
      dimStyle = _ref3.dimStyle,
      duration = _ref3.duration,
      isVisible = _ref3.isVisible;
  var isTransitionStarted = _ref4.isTransitionStarted;
  return [styles.dim, (0, _autoprefix["default"])({
    transition: "opacity ".concat(duration / 1000, "s ease-out")
  }), dimStyle, dimMode === 'transparent' && styles.dimTransparent, !isVisible && styles.dimHidden, isTransitionStarted && isVisible && styles.dimAppear, isTransitionStarted && !isVisible && styles.dimDisappear];
}

function getResizerStyles(position) {
  var resizerStyle;
  var size = 10;

  switch (position) {
    case 'left':
      resizerStyle = {
        right: -size / 2,
        width: size,
        top: 0,
        height: '100%',
        cursor: 'col-resize'
      };
      break;

    case 'right':
      resizerStyle = {
        left: -size / 2,
        width: size,
        top: 0,
        height: '100%',
        cursor: 'col-resize'
      };
      break;

    case 'top':
      resizerStyle = {
        bottom: -size / 2,
        height: size,
        left: 0,
        width: '100%',
        cursor: 'row-resize'
      };
      break;

    case 'bottom':
      resizerStyle = {
        top: -size / 2,
        height: size,
        left: 0,
        width: '100%',
        cursor: 'row-resize'
      };
      break;
  }

  return [styles.resizer, (0, _autoprefix["default"])(resizerStyle)];
}

function getFullSize(position, fullWidth, fullHeight) {
  return position === 'left' || position === 'right' ? fullWidth : fullHeight;
}

var Dock = /*#__PURE__*/function (_Component) {
  _inherits(Dock, _Component);

  var _super = _createSuper(Dock);

  function Dock() {
    var _this;

    _classCallCheck(this, Dock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      isControlled: typeof _this.props.size !== 'undefined',
      size: _this.props.size || _this.props.defaultSize,
      isDimHidden: !_this.props.isVisible,
      fullWidth: window.innerWidth,
      fullHeight: window.innerHeight,
      isTransitionStarted: false,
      isWindowResizing: false
    });

    _defineProperty(_assertThisInitialized(_this), "transitionEnd", function () {
      _this.setState({
        isTransitionStarted: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "hideDim", function () {
      if (!_this.props.isVisible) {
        _this.setState({
          isDimHidden: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleDimClick", function () {
      if (_this.props.dimMode === 'opaque') {
        _this.props.onVisibleChange && _this.props.onVisibleChange(false);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleResize", function () {
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(_this.updateWindowSize.bind(_assertThisInitialized(_this), true));
      } else {
        _this.updateWindowSize(true);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "updateWindowSize", function (windowResize) {
      var sizeState = {
        fullWidth: window.innerWidth,
        fullHeight: window.innerHeight
      };

      if (windowResize) {
        _this.setState(_objectSpread(_objectSpread({}, sizeState), {}, {
          isResizing: true,
          isWindowResizing: windowResize
        }));

        _this.debouncedUpdateWindowSizeEnd();
      } else {
        _this.setState(sizeState);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "updateWindowSizeEnd", function () {
      _this.setState({
        isResizing: false,
        isWindowResizing: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "debouncedUpdateWindowSizeEnd", (0, _lodash["default"])(_this.updateWindowSizeEnd, 30));

    _defineProperty(_assertThisInitialized(_this), "handleWrapperLeave", function () {
      _this.setState({
        isResizing: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function () {
      _this.setState({
        isResizing: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseUp", function () {
      _this.setState({
        isResizing: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseMove", function (e) {
      if (!_this.state.isResizing || _this.state.isWindowResizing) return;
      if (!e.touches) e.preventDefault();
      var _this$props = _this.props,
          position = _this$props.position,
          fluid = _this$props.fluid;
      var _this$state = _this.state,
          fullWidth = _this$state.fullWidth,
          fullHeight = _this$state.fullHeight,
          isControlled = _this$state.isControlled;
      var _ref5 = e,
          x = _ref5.clientX,
          y = _ref5.clientY;

      if (e.touches) {
        x = e.touches[0].clientX;
        y = e.touches[0].clientY;
      }

      var size;

      switch (position) {
        case 'left':
          size = fluid ? x / fullWidth : x;
          break;

        case 'right':
          size = fluid ? (fullWidth - x) / fullWidth : fullWidth - x;
          break;

        case 'top':
          size = fluid ? y / fullHeight : y;
          break;

        case 'bottom':
          size = fluid ? (fullHeight - y) / fullHeight : fullHeight - y;
          break;
      }

      _this.props.onSizeChange && _this.props.onSizeChange(size);

      if (!isControlled) {
        _this.setState({
          size: size
        });
      }
    });

    return _this;
  }

  _createClass(Dock, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('touchend', this.handleMouseUp);
      window.addEventListener('mouseup', this.handleMouseUp);
      window.addEventListener('touchmove', this.handleMouseMove);
      window.addEventListener('mousemove', this.handleMouseMove);
      window.addEventListener('resize', this.handleResize);
      this.updateWindowSize();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('touchend', this.handleMouseUp);
      window.removeEventListener('mouseup', this.handleMouseUp);
      window.removeEventListener('touchmove', this.handleMouseMove);
      window.removeEventListener('mousemove', this.handleMouseMove);
      window.removeEventListener('resize', this.handleResize);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var isControlled = typeof nextProps.size !== 'undefined';
      this.setState({
        isControlled: isControlled
      });

      if (isControlled && nextProps.size && this.props.size !== nextProps.size) {
        this.setState({
          size: nextProps.size
        });
      } else if (this.props.fluid !== nextProps.fluid) {
        this.updateSize(nextProps);
      }

      if (this.props.isVisible !== nextProps.isVisible) {
        this.setState({
          isTransitionStarted: true
        });
      }
    }
  }, {
    key: "updateSize",
    value: function updateSize(props) {
      var _this$state2 = this.state,
          fullWidth = _this$state2.fullWidth,
          fullHeight = _this$state2.fullHeight;
      this.setState({
        size: props.fluid ? this.state.size / getFullSize(props.position, fullWidth, fullHeight) : getFullSize(props.position, fullWidth, fullHeight) * this.state.size
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      if (this.props.isVisible !== prevProps.isVisible) {
        if (!this.props.isVisible) {
          window.setTimeout(function () {
            return _this2.hideDim();
          }, this.props.duration);
        } else {
          this.setState({
            isDimHidden: false
          });
        }

        window.setTimeout(function () {
          return _this2.setState({
            isTransitionStarted: false
          });
        }, 0);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          zIndex = _this$props2.zIndex,
          dimMode = _this$props2.dimMode,
          position = _this$props2.position,
          isVisible = _this$props2.isVisible;
      var _this$state3 = this.state,
          isResizing = _this$state3.isResizing,
          size = _this$state3.size,
          isDimHidden = _this$state3.isDimHidden;
      var dimStyles = Object.assign.apply(Object, [{}].concat(_toConsumableArray(getDimStyles(this.props, this.state))));
      var dockStyles = Object.assign.apply(Object, [{}].concat(_toConsumableArray(getDockStyles(this.props, this.state))));
      var resizerStyles = Object.assign.apply(Object, [{}].concat(_toConsumableArray(getResizerStyles(position))));
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: Object.assign({}, styles.wrapper, {
          zIndex: zIndex
        })
      }, dimMode !== 'none' && !isDimHidden && /*#__PURE__*/_react["default"].createElement("div", {
        style: dimStyles,
        onClick: this.handleDimClick
      }), /*#__PURE__*/_react["default"].createElement("div", {
        style: dockStyles
      }, /*#__PURE__*/_react["default"].createElement("div", {
        style: resizerStyles,
        onMouseDown: this.handleMouseDown,
        onTouchStart: this.handleMouseDown
      }), /*#__PURE__*/_react["default"].createElement("div", {
        style: styles.dockContent
      }, typeof children === 'function' ? children({
        position: position,
        isResizing: isResizing,
        size: size,
        isVisible: isVisible
      }) : children)));
    }
  }]);

  return Dock;
}(_react.Component);

exports["default"] = Dock;

_defineProperty(Dock, "propTypes", {
  position: _propTypes["default"].oneOf(['left', 'right', 'top', 'bottom']),
  zIndex: _propTypes["default"].number,
  fluid: _propTypes["default"].bool,
  size: _propTypes["default"].number,
  defaultSize: _propTypes["default"].number,
  dimMode: _propTypes["default"].oneOf(['none', 'transparent', 'opaque']),
  isVisible: _propTypes["default"].bool,
  onVisibleChange: _propTypes["default"].func,
  onSizeChange: _propTypes["default"].func,
  dimStyle: _propTypes["default"].object,
  dockStyle: _propTypes["default"].object,
  duration: _propTypes["default"].number
});

_defineProperty(Dock, "defaultProps", {
  position: 'left',
  zIndex: 99999999,
  fluid: true,
  defaultSize: 0.3,
  dimMode: 'opaque',
  duration: 200
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Eb2NrLnRzeCJdLCJuYW1lcyI6WyJhdXRvcHJlZml4ZXMiLCJzdHlsZXMiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwib2JqIiwia2V5Iiwid3JhcHBlciIsInBvc2l0aW9uIiwid2lkdGgiLCJoZWlnaHQiLCJ0b3AiLCJsZWZ0IiwiZGltIiwicmlnaHQiLCJib3R0b20iLCJ6SW5kZXgiLCJiYWNrZ3JvdW5kIiwib3BhY2l0eSIsImRpbUFwcGVhciIsImRpbVRyYW5zcGFyZW50IiwicG9pbnRlckV2ZW50cyIsImRpbUhpZGRlbiIsImRvY2siLCJib3hTaGFkb3ciLCJkb2NrSGlkZGVuIiwiZG9ja1Jlc2l6aW5nIiwidHJhbnNpdGlvbiIsImRvY2tDb250ZW50Iiwib3ZlcmZsb3ciLCJyZXNpemVyIiwiZ2V0VHJhbnNpdGlvbnMiLCJkdXJhdGlvbiIsIm1hcCIsInAiLCJnZXREb2NrU3R5bGVzIiwiZmx1aWQiLCJkb2NrU3R5bGUiLCJkb2NrSGlkZGVuU3R5bGUiLCJpc1Zpc2libGUiLCJzaXplIiwiaXNSZXNpemluZyIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJwb3NTdHlsZSIsImFic1NpemUiLCJnZXRSZXN0U2l6ZSIsImZ1bGxTaXplIiwidHJhbnNpdGlvbnMiLCJmaWx0ZXIiLCJ0Iiwiam9pbiIsImdldERpbVN0eWxlcyIsImRpbU1vZGUiLCJkaW1TdHlsZSIsImlzVHJhbnNpdGlvblN0YXJ0ZWQiLCJkaW1EaXNhcHBlYXIiLCJnZXRSZXNpemVyU3R5bGVzIiwicmVzaXplclN0eWxlIiwiY3Vyc29yIiwiZ2V0RnVsbFNpemUiLCJEb2NrIiwiaXNDb250cm9sbGVkIiwicHJvcHMiLCJkZWZhdWx0U2l6ZSIsImlzRGltSGlkZGVuIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiaXNXaW5kb3dSZXNpemluZyIsInNldFN0YXRlIiwib25WaXNpYmxlQ2hhbmdlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidXBkYXRlV2luZG93U2l6ZSIsImJpbmQiLCJ3aW5kb3dSZXNpemUiLCJzaXplU3RhdGUiLCJkZWJvdW5jZWRVcGRhdGVXaW5kb3dTaXplRW5kIiwidXBkYXRlV2luZG93U2l6ZUVuZCIsImUiLCJzdGF0ZSIsInRvdWNoZXMiLCJwcmV2ZW50RGVmYXVsdCIsIngiLCJjbGllbnRYIiwieSIsImNsaWVudFkiLCJvblNpemVDaGFuZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTW92ZSIsImhhbmRsZVJlc2l6ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJuZXh0UHJvcHMiLCJ1cGRhdGVTaXplIiwicHJldlByb3BzIiwic2V0VGltZW91dCIsImhpZGVEaW0iLCJjaGlsZHJlbiIsImRpbVN0eWxlcyIsImFzc2lnbiIsImRvY2tTdHlsZXMiLCJyZXNpemVyU3R5bGVzIiwiaGFuZGxlRGltQ2xpY2siLCJoYW5kbGVNb3VzZURvd24iLCJDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJvbmVPZiIsIm51bWJlciIsImJvb2wiLCJmdW5jIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU1BLFNBQVNBLFlBQVQsQ0FBc0JDLE1BQXRCLEVBQXNDO0FBQ3BDLFNBQU9DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixNQUFaLEVBQW9CRyxNQUFwQixDQUNMLFVBQUNDLEdBQUQsRUFBTUMsR0FBTjtBQUFBLFdBQWdCRCxHQUFHLENBQUNDLEdBQUQsQ0FBSCxHQUFXLDRCQUFXTCxNQUFNLENBQUNLLEdBQUQsQ0FBakIsQ0FBWixFQUFzQ0QsR0FBckQ7QUFBQSxHQURLLEVBRUwsRUFGSyxDQUFQO0FBSUQ7O0FBRUQsSUFBTUosTUFBTSxHQUFHRCxZQUFZLENBQUM7QUFDMUJPLEVBQUFBLE9BQU8sRUFBRTtBQUNQQyxJQUFBQSxRQUFRLEVBQUUsT0FESDtBQUVQ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RixFQUFBQSxNQUFNLEVBQUUwRixzQkFBVUUsTUFGRDtBQUdqQnhFLEVBQUFBLEtBQUssRUFBRXNFLHNCQUFVRyxJQUhBO0FBSWpCckUsRUFBQUEsSUFBSSxFQUFFa0Usc0JBQVVFLE1BSkM7QUFLakI1QyxFQUFBQSxXQUFXLEVBQUUwQyxzQkFBVUUsTUFMTjtBQU1qQnZELEVBQUFBLE9BQU8sRUFBRXFELHNCQUFVQyxLQUFWLENBQWdCLENBQUMsTUFBRCxFQUFTLGFBQVQsRUFBd0IsUUFBeEIsQ0FBaEIsQ0FOUTtBQU9qQnBFLEVBQUFBLFNBQVMsRUFBRW1FLHNCQUFVRyxJQVBKO0FBUWpCdEMsRUFBQUEsZUFBZSxFQUFFbUMsc0JBQVVJLElBUlY7QUFTakJ2QixFQUFBQSxZQUFZLEVBQUVtQixzQkFBVUksSUFUUDtBQVVqQnhELEVBQUFBLFFBQVEsRUFBRW9ELHNCQUFVSyxNQVZIO0FBV2pCMUUsRUFBQUEsU0FBUyxFQUFFcUUsc0JBQVVLLE1BWEo7QUFZakIvRSxFQUFBQSxRQUFRLEVBQUUwRSxzQkFBVUU7QUFaSCxDOztnQkFYQS9DLEksa0JBMEJHO0FBQ3BCckQsRUFBQUEsUUFBUSxFQUFFLE1BRFU7QUFFcEJRLEVBQUFBLE1BQU0sRUFBRSxRQUZZO0FBR3BCb0IsRUFBQUEsS0FBSyxFQUFFLElBSGE7QUFJcEI0QixFQUFBQSxXQUFXLEVBQUUsR0FKTztBQUtwQlgsRUFBQUEsT0FBTyxFQUFFLFFBTFc7QUFNcEJyQixFQUFBQSxRQUFRLEVBQUU7QUFOVSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2guZGVib3VuY2UnO1xuaW1wb3J0IGF1dG9wcmVmaXggZnJvbSAnLi9hdXRvcHJlZml4JztcblxuaW50ZXJmYWNlIFN0eWxlcyB7XG4gIFtrZXk6IHN0cmluZ106IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG59XG5cbmZ1bmN0aW9uIGF1dG9wcmVmaXhlcyhzdHlsZXM6IFN0eWxlcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVzKS5yZWR1Y2U8U3R5bGVzPihcbiAgICAob2JqLCBrZXkpID0+ICgob2JqW2tleV0gPSBhdXRvcHJlZml4KHN0eWxlc1trZXldKSksIG9iaiksXG4gICAge31cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gYXV0b3ByZWZpeGVzKHtcbiAgd3JhcHBlcjoge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgfSxcblxuICBkaW06IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IDAsXG4gICAgekluZGV4OiAwLFxuICAgIGJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMiknLFxuICAgIG9wYWNpdHk6IDEsXG4gIH0sXG5cbiAgZGltQXBwZWFyOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgfSxcblxuICBkaW1UcmFuc3BhcmVudDoge1xuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgfSxcblxuICBkaW1IaWRkZW46IHtcbiAgICBvcGFjaXR5OiAwLFxuICB9LFxuXG4gIGRvY2s6IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICB6SW5kZXg6IDEsXG4gICAgYm94U2hhZG93OiAnMCAwIDRweCByZ2JhKDAsIDAsIDAsIDAuMyknLFxuICAgIGJhY2tncm91bmQ6ICd3aGl0ZScsXG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgfSxcblxuICBkb2NrSGlkZGVuOiB7XG4gICAgb3BhY2l0eTogMCxcbiAgfSxcblxuICBkb2NrUmVzaXppbmc6IHtcbiAgICB0cmFuc2l0aW9uOiAnbm9uZScsXG4gIH0sXG5cbiAgZG9ja0NvbnRlbnQ6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIG92ZXJmbG93OiAnYXV0bycsXG4gIH0sXG5cbiAgcmVzaXplcjoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHpJbmRleDogMixcbiAgICBvcGFjaXR5OiAwLFxuICB9LFxufSk7XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25zKGR1cmF0aW9uOiBudW1iZXIpIHtcbiAgcmV0dXJuIFsnbGVmdCcsICd0b3AnLCAnd2lkdGgnLCAnaGVpZ2h0J10ubWFwKFxuICAgIChwKSA9PiBgJHtwfSAke2R1cmF0aW9uIC8gMTAwMH1zIGVhc2Utb3V0YFxuICApO1xufVxuXG5mdW5jdGlvbiBnZXREb2NrU3R5bGVzKFxuICB7IGZsdWlkLCBkb2NrU3R5bGUsIGRvY2tIaWRkZW5TdHlsZSwgZHVyYXRpb24sIHBvc2l0aW9uLCBpc1Zpc2libGUgfTogUHJvcHMsXG4gIHsgc2l6ZSwgaXNSZXNpemluZywgZnVsbFdpZHRoLCBmdWxsSGVpZ2h0IH06IFN0YXRlXG4pIHtcbiAgbGV0IHBvc1N0eWxlO1xuICBjb25zdCBhYnNTaXplID0gZmx1aWQgPyBgJHtzaXplICogMTAwfSVgIDogYCR7c2l6ZX1weGA7XG5cbiAgZnVuY3Rpb24gZ2V0UmVzdFNpemUoZnVsbFNpemU6IG51bWJlcikge1xuICAgIHJldHVybiBmbHVpZCA/IGAkezEwMCAtIHNpemUgKiAxMDB9JWAgOiBgJHtmdWxsU2l6ZSAtIHNpemV9cHhgO1xuICB9XG5cbiAgc3dpdGNoIChwb3NpdGlvbikge1xuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgcG9zU3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiBhYnNTaXplLFxuICAgICAgICBsZWZ0OiBpc1Zpc2libGUgPyAwIDogJy0nICsgYWJzU2l6ZSxcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICBwb3NTdHlsZSA9IHtcbiAgICAgICAgbGVmdDogaXNWaXNpYmxlID8gZ2V0UmVzdFNpemUoZnVsbFdpZHRoKSA6IGZ1bGxXaWR0aCxcbiAgICAgICAgd2lkdGg6IGFic1NpemUsXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHBvc1N0eWxlID0ge1xuICAgICAgICB0b3A6IGlzVmlzaWJsZSA/IDAgOiAnLScgKyBhYnNTaXplLFxuICAgICAgICBoZWlnaHQ6IGFic1NpemUsXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHBvc1N0eWxlID0ge1xuICAgICAgICB0b3A6IGlzVmlzaWJsZSA/IGdldFJlc3RTaXplKGZ1bGxIZWlnaHQpIDogZnVsbEhlaWdodCxcbiAgICAgICAgaGVpZ2h0OiBhYnNTaXplLFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgY29uc3QgdHJhbnNpdGlvbnMgPSBnZXRUcmFuc2l0aW9ucyhkdXJhdGlvbik7XG5cbiAgcmV0dXJuIFtcbiAgICBzdHlsZXMuZG9jayxcbiAgICBhdXRvcHJlZml4KHtcbiAgICAgIHRyYW5zaXRpb246IFtcbiAgICAgICAgLi4udHJhbnNpdGlvbnMsXG4gICAgICAgICFpc1Zpc2libGUgJiYgYG9wYWNpdHkgMC4wMXMgbGluZWFyICR7ZHVyYXRpb24gLyAxMDAwfXNgLFxuICAgICAgXVxuICAgICAgICAuZmlsdGVyKCh0KSA9PiB0KVxuICAgICAgICAuam9pbignLCcpLFxuICAgIH0pLFxuICAgIGRvY2tTdHlsZSxcbiAgICBhdXRvcHJlZml4KHBvc1N0eWxlKSxcbiAgICBpc1Jlc2l6aW5nICYmIHN0eWxlcy5kb2NrUmVzaXppbmcsXG4gICAgIWlzVmlzaWJsZSAmJiBzdHlsZXMuZG9ja0hpZGRlbixcbiAgICAhaXNWaXNpYmxlICYmIGRvY2tIaWRkZW5TdHlsZSxcbiAgXTtcbn1cblxuZnVuY3Rpb24gZ2V0RGltU3R5bGVzKFxuICB7IGRpbU1vZGUsIGRpbVN0eWxlLCBkdXJhdGlvbiwgaXNWaXNpYmxlIH06IFByb3BzLFxuICB7IGlzVHJhbnNpdGlvblN0YXJ0ZWQgfTogU3RhdGVcbikge1xuICByZXR1cm4gW1xuICAgIHN0eWxlcy5kaW0sXG4gICAgYXV0b3ByZWZpeCh7XG4gICAgICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9uIC8gMTAwMH1zIGVhc2Utb3V0YCxcbiAgICB9KSxcbiAgICBkaW1TdHlsZSxcbiAgICBkaW1Nb2RlID09PSAndHJhbnNwYXJlbnQnICYmIHN0eWxlcy5kaW1UcmFuc3BhcmVudCxcbiAgICAhaXNWaXNpYmxlICYmIHN0eWxlcy5kaW1IaWRkZW4sXG4gICAgaXNUcmFuc2l0aW9uU3RhcnRlZCAmJiBpc1Zpc2libGUgJiYgc3R5bGVzLmRpbUFwcGVhcixcbiAgICBpc1RyYW5zaXRpb25TdGFydGVkICYmICFpc1Zpc2libGUgJiYgc3R5bGVzLmRpbURpc2FwcGVhcixcbiAgXTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVzaXplclN0eWxlcyhwb3NpdGlvbjogJ2xlZnQnIHwgJ3JpZ2h0JyB8ICd0b3AnIHwgJ2JvdHRvbScpIHtcbiAgbGV0IHJlc2l6ZXJTdHlsZTtcbiAgY29uc3Qgc2l6ZSA9IDEwO1xuXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIHJlc2l6ZXJTdHlsZSA9IHtcbiAgICAgICAgcmlnaHQ6IC1zaXplIC8gMixcbiAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGN1cnNvcjogJ2NvbC1yZXNpemUnLFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJlc2l6ZXJTdHlsZSA9IHtcbiAgICAgICAgbGVmdDogLXNpemUgLyAyLFxuICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgY3Vyc29yOiAnY29sLXJlc2l6ZScsXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHJlc2l6ZXJTdHlsZSA9IHtcbiAgICAgICAgYm90dG9tOiAtc2l6ZSAvIDIsXG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgY3Vyc29yOiAncm93LXJlc2l6ZScsXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHJlc2l6ZXJTdHlsZSA9IHtcbiAgICAgICAgdG9wOiAtc2l6ZSAvIDIsXG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgY3Vyc29yOiAncm93LXJlc2l6ZScsXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gW3N0eWxlcy5yZXNpemVyLCBhdXRvcHJlZml4KHJlc2l6ZXJTdHlsZSldO1xufVxuXG5mdW5jdGlvbiBnZXRGdWxsU2l6ZShcbiAgcG9zaXRpb246ICdsZWZ0JyB8ICdyaWdodCcgfCAndG9wJyB8ICdib3R0b20nLFxuICBmdWxsV2lkdGg6IG51bWJlcixcbiAgZnVsbEhlaWdodDogbnVtYmVyXG4pIHtcbiAgcmV0dXJuIHBvc2l0aW9uID09PSAnbGVmdCcgfHwgcG9zaXRpb24gPT09ICdyaWdodCcgPyBmdWxsV2lkdGggOiBmdWxsSGVpZ2h0O1xufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBwb3NpdGlvbjogJ2xlZnQnIHwgJ3JpZ2h0JyB8ICd0b3AnIHwgJ2JvdHRvbSc7XG4gIHpJbmRleDogbnVtYmVyO1xuICBmbHVpZDogYm9vbGVhbjtcbiAgc2l6ZT86IG51bWJlcjtcbiAgZGVmYXVsdFNpemU6IG51bWJlcjtcbiAgZGltTW9kZTogJ25vbmUnIHwgJ3RyYW5zcGFyZW50JyB8ICdvcGFxdWUnO1xuICBpc1Zpc2libGU/OiBib29sZWFuO1xuICBvblZpc2libGVDaGFuZ2U/OiAoaXNWaXNpYmxlOiBib29sZWFuKSA9PiB2b2lkO1xuICBvblNpemVDaGFuZ2U/OiAoc2l6ZTogbnVtYmVyKSA9PiB2b2lkO1xuICBkaW1TdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXMgfCBudWxsO1xuICBkb2NrU3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzIHwgbnVsbDtcbiAgZG9ja0hpZGRlblN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcyB8IG51bGw7XG4gIGR1cmF0aW9uOiBudW1iZXI7XG4gIGNoaWxkcmVuPzpcbiAgICB8IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgICAgICAgcG9zaXRpb246ICdsZWZ0JyB8ICdyaWdodCcgfCAndG9wJyB8ICdib3R0b20nO1xuICAgICAgICBpc1Jlc2l6aW5nOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAgICAgICBzaXplOiBudW1iZXI7XG4gICAgICAgIGlzVmlzaWJsZTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICAgIH0+XG4gICAgfCBSZWFjdE5vZGU7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGlzQ29udHJvbGxlZDogYm9vbGVhbjtcbiAgc2l6ZTogbnVtYmVyO1xuICBpc0RpbUhpZGRlbjogYm9vbGVhbjtcbiAgZnVsbFdpZHRoOiBudW1iZXI7XG4gIGZ1bGxIZWlnaHQ6IG51bWJlcjtcbiAgaXNUcmFuc2l0aW9uU3RhcnRlZDogYm9vbGVhbjtcbiAgaXNXaW5kb3dSZXNpemluZzogdW5rbm93bjtcbiAgaXNSZXNpemluZz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvY2sgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHN0YXRlOiBTdGF0ZSA9IHtcbiAgICBpc0NvbnRyb2xsZWQ6IHR5cGVvZiB0aGlzLnByb3BzLnNpemUgIT09ICd1bmRlZmluZWQnLFxuICAgIHNpemU6IHRoaXMucHJvcHMuc2l6ZSB8fCB0aGlzLnByb3BzLmRlZmF1bHRTaXplLFxuICAgIGlzRGltSGlkZGVuOiAhdGhpcy5wcm9wcy5pc1Zpc2libGUsXG4gICAgZnVsbFdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICBmdWxsSGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgaXNUcmFuc2l0aW9uU3RhcnRlZDogZmFsc2UsXG4gICAgaXNXaW5kb3dSZXNpemluZzogZmFsc2UsXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10pLFxuICAgIHpJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBmbHVpZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBkZWZhdWx0U2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBkaW1Nb2RlOiBQcm9wVHlwZXMub25lT2YoWydub25lJywgJ3RyYW5zcGFyZW50JywgJ29wYXF1ZSddKSxcbiAgICBpc1Zpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uVmlzaWJsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TaXplQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBkaW1TdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBkb2NrU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgZHVyYXRpb246IFByb3BUeXBlcy5udW1iZXIsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBwb3NpdGlvbjogJ2xlZnQnLFxuICAgIHpJbmRleDogOTk5OTk5OTksXG4gICAgZmx1aWQ6IHRydWUsXG4gICAgZGVmYXVsdFNpemU6IDAuMyxcbiAgICBkaW1Nb2RlOiAnb3BhcXVlJyxcbiAgICBkdXJhdGlvbjogMjAwLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlTW91c2VNb3ZlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuXG4gICAgdGhpcy51cGRhdGVXaW5kb3dTaXplKCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wczogUHJvcHMpIHtcbiAgICBjb25zdCBpc0NvbnRyb2xsZWQgPSB0eXBlb2YgbmV4dFByb3BzLnNpemUgIT09ICd1bmRlZmluZWQnO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29udHJvbGxlZCB9KTtcblxuICAgIGlmIChpc0NvbnRyb2xsZWQgJiYgbmV4dFByb3BzLnNpemUgJiYgdGhpcy5wcm9wcy5zaXplICE9PSBuZXh0UHJvcHMuc2l6ZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNpemU6IG5leHRQcm9wcy5zaXplIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5mbHVpZCAhPT0gbmV4dFByb3BzLmZsdWlkKSB7XG4gICAgICB0aGlzLnVwZGF0ZVNpemUobmV4dFByb3BzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pc1Zpc2libGUgIT09IG5leHRQcm9wcy5pc1Zpc2libGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc1RyYW5zaXRpb25TdGFydGVkOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlU2l6ZShwcm9wczogUHJvcHMpIHtcbiAgICBjb25zdCB7IGZ1bGxXaWR0aCwgZnVsbEhlaWdodCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2l6ZTogcHJvcHMuZmx1aWRcbiAgICAgICAgPyB0aGlzLnN0YXRlLnNpemUgLyBnZXRGdWxsU2l6ZShwcm9wcy5wb3NpdGlvbiwgZnVsbFdpZHRoLCBmdWxsSGVpZ2h0KVxuICAgICAgICA6IGdldEZ1bGxTaXplKHByb3BzLnBvc2l0aW9uLCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQpICogdGhpcy5zdGF0ZS5zaXplLFxuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogUHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5pc1Zpc2libGUgIT09IHByZXZQcm9wcy5pc1Zpc2libGUpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5pc1Zpc2libGUpIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5oaWRlRGltKCksIHRoaXMucHJvcHMuZHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzRGltSGlkZGVuOiBmYWxzZSB9KTtcbiAgICAgIH1cblxuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzVHJhbnNpdGlvblN0YXJ0ZWQ6IGZhbHNlIH0pLCAwKTtcbiAgICB9XG4gIH1cblxuICB0cmFuc2l0aW9uRW5kID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc1RyYW5zaXRpb25TdGFydGVkOiBmYWxzZSB9KTtcbiAgfTtcblxuICBoaWRlRGltID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5wcm9wcy5pc1Zpc2libGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0RpbUhpZGRlbjogdHJ1ZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIHpJbmRleCwgZGltTW9kZSwgcG9zaXRpb24sIGlzVmlzaWJsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzUmVzaXppbmcsIHNpemUsIGlzRGltSGlkZGVuIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgZGltU3R5bGVzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgLi4uZ2V0RGltU3R5bGVzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpXG4gICAgKTtcbiAgICBjb25zdCBkb2NrU3R5bGVzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgLi4uZ2V0RG9ja1N0eWxlcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKVxuICAgICk7XG4gICAgY29uc3QgcmVzaXplclN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmdldFJlc2l6ZXJTdHlsZXMocG9zaXRpb24pKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXtPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMud3JhcHBlciwgeyB6SW5kZXggfSl9PlxuICAgICAgICB7ZGltTW9kZSAhPT0gJ25vbmUnICYmICFpc0RpbUhpZGRlbiAmJiAoXG4gICAgICAgICAgPGRpdiBzdHlsZT17ZGltU3R5bGVzfSBvbkNsaWNrPXt0aGlzLmhhbmRsZURpbUNsaWNrfSAvPlxuICAgICAgICApfVxuICAgICAgICA8ZGl2IHN0eWxlPXtkb2NrU3R5bGVzfT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBzdHlsZT17cmVzaXplclN0eWxlc31cbiAgICAgICAgICAgIG9uTW91c2VEb3duPXt0aGlzLmhhbmRsZU1vdXNlRG93bn1cbiAgICAgICAgICAgIG9uVG91Y2hTdGFydD17dGhpcy5oYW5kbGVNb3VzZURvd259XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuZG9ja0NvbnRlbnR9PlxuICAgICAgICAgICAge3R5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICA/IChcbiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIGFzIFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdsZWZ0JyB8ICdyaWdodCcgfCAndG9wJyB8ICdib3R0b20nO1xuICAgICAgICAgICAgICAgICAgICBpc1Jlc2l6aW5nOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBzaXplOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgIH0+XG4gICAgICAgICAgICAgICAgKSh7XG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgIGlzUmVzaXppbmcsXG4gICAgICAgICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIDogY2hpbGRyZW59XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGhhbmRsZURpbUNsaWNrID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLmRpbU1vZGUgPT09ICdvcGFxdWUnKSB7XG4gICAgICB0aGlzLnByb3BzLm9uVmlzaWJsZUNoYW5nZSAmJiB0aGlzLnByb3BzLm9uVmlzaWJsZUNoYW5nZShmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZVdpbmRvd1NpemUuYmluZCh0aGlzLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlV2luZG93U2l6ZSh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdXBkYXRlV2luZG93U2l6ZSA9ICh3aW5kb3dSZXNpemU/OiB0cnVlKSA9PiB7XG4gICAgY29uc3Qgc2l6ZVN0YXRlID0ge1xuICAgICAgZnVsbFdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgIGZ1bGxIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICB9O1xuXG4gICAgaWYgKHdpbmRvd1Jlc2l6ZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIC4uLnNpemVTdGF0ZSxcbiAgICAgICAgaXNSZXNpemluZzogdHJ1ZSxcbiAgICAgICAgaXNXaW5kb3dSZXNpemluZzogd2luZG93UmVzaXplLFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuZGVib3VuY2VkVXBkYXRlV2luZG93U2l6ZUVuZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHNpemVTdGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIHVwZGF0ZVdpbmRvd1NpemVFbmQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc1Jlc2l6aW5nOiBmYWxzZSxcbiAgICAgIGlzV2luZG93UmVzaXppbmc6IGZhbHNlLFxuICAgIH0pO1xuICB9O1xuXG4gIGRlYm91bmNlZFVwZGF0ZVdpbmRvd1NpemVFbmQgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZVdpbmRvd1NpemVFbmQsIDMwKTtcblxuICBoYW5kbGVXcmFwcGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzUmVzaXppbmc6IGZhbHNlIH0pO1xuICB9O1xuXG4gIGhhbmRsZU1vdXNlRG93biA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNSZXNpemluZzogdHJ1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVNb3VzZVVwID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc1Jlc2l6aW5nOiBmYWxzZSB9KTtcbiAgfTtcblxuICBoYW5kbGVNb3VzZU1vdmUgPSAoZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpID0+IHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNSZXNpemluZyB8fCB0aGlzLnN0YXRlLmlzV2luZG93UmVzaXppbmcpIHJldHVybjtcblxuICAgIGlmICghKGUgYXMgVG91Y2hFdmVudCkudG91Y2hlcykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY29uc3QgeyBwb3NpdGlvbiwgZmx1aWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIGlzQ29udHJvbGxlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgeyBjbGllbnRYOiB4LCBjbGllbnRZOiB5IH0gPSBlIGFzIE1vdXNlRXZlbnQ7XG5cbiAgICBpZiAoKGUgYXMgVG91Y2hFdmVudCkudG91Y2hlcykge1xuICAgICAgeCA9IChlIGFzIFRvdWNoRXZlbnQpLnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgIHkgPSAoZSBhcyBUb3VjaEV2ZW50KS50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgfVxuXG4gICAgbGV0IHNpemU7XG5cbiAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgc2l6ZSA9IGZsdWlkID8geCAvIGZ1bGxXaWR0aCA6IHg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICBzaXplID0gZmx1aWQgPyAoZnVsbFdpZHRoIC0geCkgLyBmdWxsV2lkdGggOiBmdWxsV2lkdGggLSB4O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgIHNpemUgPSBmbHVpZCA/IHkgLyBmdWxsSGVpZ2h0IDogeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICBzaXplID0gZmx1aWQgPyAoZnVsbEhlaWdodCAtIHkpIC8gZnVsbEhlaWdodCA6IGZ1bGxIZWlnaHQgLSB5O1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uU2l6ZUNoYW5nZSAmJiB0aGlzLnByb3BzLm9uU2l6ZUNoYW5nZShzaXplKTtcblxuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2l6ZSB9KTtcbiAgICB9XG4gIH07XG59XG4iXX0=