{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maste\\\\OneDrive\\\\Desktop\\\\WebDev\\\\InstiConnect\\\\client\\\\src\\\\components\\\\ProtectedRoutes.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies(); // receives component and any other props represented by ...rest\n\nexport default function ProtectedRoutes(_ref) {\n  let {\n    component: Component,\n    ...rest\n  } = _ref;\n  return (\n    /*#__PURE__*/\n    // this route takes other routes assigned to it from the App.js and return the same route if condition is met\n    React.createElement(Route, Object.assign({}, rest, {\n      render: props => {\n        // get cookie from browser if logged in\n        const token = cookies.get(\"TOKEN\"); // returns route if there is a valid token set in the cookie\n\n        if (token) {\n          return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 13\n            }\n          }));\n        } else {\n          // returns the user to the landing page if there is no valid token set\n          return /*#__PURE__*/React.createElement(Redirect, {\n            to: {\n              pathname: \"/\",\n              state: {\n                // sets the location a user was about to access before being redirected to login\n                from: props.location\n              }\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 7\n            }\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 3\n      }\n    }))\n  );\n}","map":{"version":3,"names":["React","Route","Redirect","Cookies","cookies","ProtectedRoutes","component","Component","rest","props","token","get","pathname","state","from","location"],"sources":["C:/Users/maste/OneDrive/Desktop/WebDev/InstiConnect/client/src/components/ProtectedRoutes.js"],"sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport Cookies from \"universal-cookie\";\r\nconst cookies = new Cookies();\r\n\r\n// receives component and any other props represented by ...rest\r\nexport default function ProtectedRoutes({ component: Component, ...rest }) {\r\n\treturn (\r\n\t\t// this route takes other routes assigned to it from the App.js and return the same route if condition is met\r\n\t\t<Route\r\n\t\t\t{...rest}\r\n\t\t\trender={(props) => {\r\n\t\t\t\t// get cookie from browser if logged in\r\n\t\t\t\tconst token = cookies.get(\"TOKEN\");\r\n\r\n\t\t\t\t// returns route if there is a valid token set in the cookie\r\n\t\t\t\tif (token) {\r\n\t\t\t\t\treturn <Component {...props} />;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// returns the user to the landing page if there is no valid token set\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Redirect\r\n\t\t\t\t\t\t\tto={{\r\n\t\t\t\t\t\t\t\tpathname: \"/\",\r\n\t\t\t\t\t\t\t\tstate: {\r\n\t\t\t\t\t\t\t\t\t// sets the location a user was about to access before being redirected to login\r\n\t\t\t\t\t\t\t\t\tfrom: props.location,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB,C,CAEA;;AACA,eAAe,SAASE,eAAT,OAA4D;EAAA,IAAnC;IAAEC,SAAS,EAAEC,SAAb;IAAwB,GAAGC;EAA3B,CAAmC;EAC1E;IAAA;IACC;IACA,oBAAC,KAAD,oBACKA,IADL;MAEC,MAAM,EAAGC,KAAD,IAAW;QAClB;QACA,MAAMC,KAAK,GAAGN,OAAO,CAACO,GAAR,CAAY,OAAZ,CAAd,CAFkB,CAIlB;;QACA,IAAID,KAAJ,EAAW;UACV,oBAAO,oBAAC,SAAD,oBAAeD,KAAf;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,GAAP;QACA,CAFD,MAEO;UACN;UACA,oBACC,oBAAC,QAAD;YACC,EAAE,EAAE;cACHG,QAAQ,EAAE,GADP;cAEHC,KAAK,EAAE;gBACN;gBACAC,IAAI,EAAEL,KAAK,CAACM;cAFN;YAFJ,CADL;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,EADD;QAWA;MACD,CAvBF;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA;EAFD;AA4BA"},"metadata":{},"sourceType":"module"}